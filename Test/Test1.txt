(print ( + 5 5) should be 10 )
( + 5 5 ) 
(print (+ 5 -5) should be 0 )
( + 5 -5 ) 
(print (- 10 5) should be 5 )
(- 10 5 ) 
(print (- 10 -5) should be 15 )
(- 10 -5) 
(print (/ 10 5) should be 2 )
(/ 10 5 )
(print (/ 10 -5) should be -2 )
(/ 10 -5 )
(print (* 10 5) should be 50 )
(* 10 5 )
(print (* 10 -5) should be -50 )
(* 10 -5 )
(print (> 10 5) should be T )
(> 10 5 )
(print (> 1 5) should be '()' )
(> 1 5 )
(print (< 10  5) should be '()' )
(< 10 5 )
(print (< 1  5) should be T )
(< 1 5 )
(print (= 10 10) should be T )
(= 10 10 )
(print (= 10 5) should be '()' )
(= 10 5 )
(print (EQ? 10 10) should be T )
(EQ? 10 10 )
(print (EQ? 10 5) should be '()' )
(EQ? 10 5 )
(print (number? 4)  should be T )
(number? 4 )
(print (number? Hello) should be '()' )
(number? Hello)
(set X 10 )
(print (symbol? X) should be T (set X 10) called before )
(symbol? X )
(print (symbol? Y) should be '()' )
(symbol? Y )
(print (list? (1 2 3)) should be T )
(list? ( 1 2 3 ) )
(print (list? 4) should be '()' )
(list? 4 )
(print \n)
(print (nil? ()) should be T )
(nil? () )
(print (nil? T) should be '()' -> )
(nil? T )
(print (null? ()) should be T )
(null? () )
(print (null? T) should be '()' -> )
(null? T )
(print ( '( if ( = 1 0 ) ( + 5 5 ) ( - 4 4 ) ) print result of if statement as well should be '0' ))
( if ( = 1 0 ) ( + 5 5 ) ( - 4 4 ) )
(print ( '( if ( = 1 1 ) ( + 5 5 ) ( - 4 4 ) ) print result of if statement as well should be '10' ))
( if ( = 1 1 ) ( + 5 5 ) ( - 4 4 ) )

